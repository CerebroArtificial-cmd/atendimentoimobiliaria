# app.py ‚Äî Ayla (Atendente de Imobili√°ria) no padr√£o "Streamlit AI assistant"
# ---------------------------------------------------------------------------
# Requisitos: streamlit, python-dotenv, pandas, openpyxl (para salvar .xlsx)
# pip install streamlit python-dotenv pandas openpyxl
#
# Vari√°veis de ambiente (.env):
#   OPENAI_API_KEY=...         (opcional; n√£o √© usado neste fluxo, mas deixado pronto)
#   COMPANY_NAME=Imobili√°ria XYZ
#   COMPANY_BLURB=A melhor escolha para sua casa nova!
# ---------------------------------------------------------------------------

from dotenv import load_dotenv
import os, re, time, datetime, textwrap
from collections import namedtuple

import pandas as pd
import streamlit as st

# -----------------------------------------------------------------------------
# Configura√ß√£o b√°sica (padr√£o do demo)
st.set_page_config(page_title="Ayla ‚Ä¢ Assistente de Imobili√°ria", page_icon="‚ú®")

load_dotenv()
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY", "")  # reservado p/ uso futuro
COMPANY_NAME = os.getenv("COMPANY_NAME", "Imobili√°ria XYZ")
COMPANY_BLURB = os.getenv("COMPANY_BLURB", "A melhor escolha para sua casa nova!")

WELCOME_MSG = (
    f"Oi! Sou a **Ayla**, da **{COMPANY_NAME}**. {COMPANY_BLURB}\n\n"
    "Posso te ajudar a encontrar o seu im√≥vel dos sonhos, que cabe no seu bolso. Vamos come√ßar?"
)

# SUGEST√ïES (pills) no topo ‚Äî segue o padr√£o do demo
SUGGESTIONS = {
    ":green[:material/house:] Quero comprar": "Quero comprar um im√≥vel.",
    ":blue[:material/key:] Quero alugar": "Quero alugar um im√≥vel.",
    ":orange[:material/apartment:] Apartamento 2 quartos": "Procuro apartamento com 2 quartos.",
    ":violet[:material/yard:] Casa com quintal": "Quero uma casa com quintal.",
    ":red[:material/attach_money:] At√© 300 mil": "Meu or√ßamento √© at√© 300 mil.",
}

# Rate limit ‚Äúm√≠nimo‚Äù entre perguntas (seguindo o esp√≠rito do demo)
MIN_TIME_BETWEEN_REQUESTS = datetime.timedelta(seconds=1)

# -----------------------------------------------------------------------------
# Fluxo de perguntas do funil
PERGUNTAS = {
    "nome": "Qual √© o seu nome completo?",
    "telefone": "Informe seu telefone com DDD (11 d√≠gitos, ex: 11987654321):",
    "email": "Qual √© o seu e-mail?",
    "operacao": "Voc√™ deseja comprar ou alugar? (Digite 1 para Compra ou 2 para Aluguel)",
    "tipo_imovel": "Qual tipo de im√≥vel voc√™ procura? (casa, apartamento ou outro)",
    "metragem": "Qual a metragem desejada? (apenas n√∫meros, ex: 80)",
    "quartos": "Quantos quartos voc√™ deseja? (apenas n√∫meros)",
    "faixa_preco": "Qual a faixa de pre√ßo que voc√™ tem em mente? (responda livremente)",
    "urgencia": "Qual √© a urg√™ncia da sua busca? (alta, m√©dia, baixa)",
}

# Validadores
def validar_nome(nome: str) -> bool:
    return len(nome.split()) >= 2

def validar_telefone(telefone: str) -> bool:
    return bool(re.fullmatch(r"\d{11}", telefone))

def validar_email(email: str) -> bool:
    return bool(re.fullmatch(r"[^@\s]+@[^@\s]+\.[^@\s]+", email))

def validar_operacao(op: str) -> bool:
    return op.strip() in {"1", "2"}

def validar_tipo_imovel(tipo: str) -> bool:
    return tipo.strip().lower() in {"casa", "apartamento", "outro"}

def validar_numero(valor: str) -> bool:
    return valor.strip().isdigit()

def validar_urgencia(u: str) -> bool:
    return u.strip().lower() in {"alta", "media", "m√©dia", "baixa"}

VALIDADORES = {
    "nome": validar_nome,
    "telefone": validar_telefone,
    "email": validar_email,
    "operacao": validar_operacao,
    "tipo_imovel": validar_tipo_imovel,
    "metragem": validar_numero,
    "quartos": validar_numero,
    # faixa_preco aceita livre
    "urgencia": validar_urgencia,
}

# Normalizadores (para salvar consistente)
def normalizar_campo(chave: str, valor: str) -> str:
    v = valor.strip()
    if chave == "operacao":
        return "compra" if v == "1" else "aluguel"
    if chave == "urgencia":
        return "media" if v.lower() in {"media", "m√©dia"} else v.lower()
    if chave in {"metragem", "quartos"}:
        return str(int(v))  # remove zeros √† esquerda
    return v

# -----------------------------------------------------------------------------
# Persist√™ncia do lead
LEADS_PATH = "imobiliaria_leads.xlsx"

def salvar_lead(lead: dict, path: str = LEADS_PATH):
    df = pd.DataFrame([lead])
    if os.path.exists(path):
        # Append preservando colunas existentes
        try:
            antigo = pd.read_excel(path)
            combinado = pd.concat([antigo, df], ignore_index=True)
            combinado.to_excel(path, index=False)
        except Exception:
            # Se planilha estiver corrompida ou sem colunas compat√≠veis, sobrescreve
            df.to_excel(path, index=False)
    else:
        df.to_excel(path, index=False)

# -----------------------------------------------------------------------------
# UI utilit√°rios no padr√£o do demo

@st.dialog("Aviso legal")
def show_disclaimer_dialog():
    st.caption(
        "Este chatbot √© para fins informativos. As respostas podem conter erros "
        "ou imprecis√µes. N√£o insira dados sens√≠veis. Ao usar, voc√™ concorda que "
        "os conte√∫dos podem ser utilizados para melhorar o servi√ßo."
    )

def clear_conversation():
    st.session_state.messages = []
    st.session_state.initial_question = None
    st.session_state.selected_suggestion = None
    st.session_state.lead = {}
    st.session_state.step = 0
    st.session_state.prev_question_timestamp = datetime.datetime.fromtimestamp(0)

# Inicializa√ß√£o do estado de sess√£o
if "messages" not in st.session_state:
    st.session_state.messages = []
if "lead" not in st.session_state:
    st.session_state.lead = {}
if "step" not in st.session_state:
    st.session_state.step = 0
if "prev_question_timestamp" not in st.session_state:
    st.session_state.prev_question_timestamp = datetime.datetime.fromtimestamp(0)

# -----------------------------------------------------------------------------
# Cabe√ßalho (padr√£o semelhante ao demo)
title_row = st.container(horizontal=True, vertical_alignment="bottom")
with title_row:
    st.title("Ayla ‚Ä¢ Assistente de Imobili√°ria", anchor=False, width="stretch")
    st.button("Restart", icon=":material/refresh:", on_click=clear_conversation)

# Tela inicial (sem hist√≥rico e sem pergunta ainda)
user_just_asked_initial_question = (
    "initial_question" in st.session_state and st.session_state.initial_question
)
user_just_clicked_suggestion = (
    "selected_suggestion" in st.session_state and st.session_state.selected_suggestion
)
has_message_history = len(st.session_state.messages) > 0

if not (user_just_asked_initial_question or user_just_clicked_suggestion) and not has_message_history:
    st.chat_input("Fa√ßa uma pergunta ou diga o que procura...", key="initial_question")
    selected_suggestion = st.pills(
        label="Exemplos",
        label_visibility="collapsed",
        options=SUGGESTIONS.keys(),
        key="selected_suggestion",
    )

    col1, col2 = st.columns([1, 1])
    with col1:
        st.button(
            "&nbsp;:small[:gray[:material/balance: Aviso legal]]",
            type="tertiary",
            on_click=show_disclaimer_dialog,
        )
    with col2:
        st.caption(f"üíº {COMPANY_NAME} ‚Ä¢ {COMPANY_BLURB}")

    st.stop()

# -----------------------------------------------------------------------------
# Exibir hist√≥rico como ‚Äúbubbles‚Äù
for i, m in enumerate(st.session_state.messages):
    with st.chat_message(m["role"]):
        st.markdown(m["content"])

# Entrada do usu√°rio (inferior)
user_message = st.chat_input("Digite sua resposta...")

# Prioriza a primeira intera√ß√£o via input inicial ou pill
if not user_message:
    if user_just_asked_initial_question:
        user_message = st.session_state.initial_question
    if user_just_clicked_suggestion:
        user_message = SUGGESTIONS[st.session_state.selected_suggestion]

# -----------------------------------------------------------------------------
# L√≥gica do fluxo do funil em cima do padr√£o de chat
def perguntar_proximo_campo():
    """Mostra pr√≥xima pergunta do funil, no estilo de chat assistant."""
    if st.session_state.step < len(PERGUNTAS):
        chave = list(PERGUNTAS.keys())[st.session_state.step]
        st.session_state.messages.append({"role": "assistant", "content": PERGUNTAS[chave]})
        with st.chat_message("assistant"):
            st.markdown(PERGUNTAS[chave])
    else:
        # Finaliza cadastro
        salvar_lead(st.session_state.lead)
        msg_final = (
            "Perfeito! Lead completo e salvo ‚úÖ\n\n"
            "Em breve nossa equipe entrar√° em contato. "
            "Se quiser, pode me contar mais prefer√™ncias (bairro, vagas, pet-friendly etc.)."
        )
        st.session_state.messages.append({"role": "assistant", "content": msg_final})
        with st.chat_message("assistant"):
            st.markdown(msg_final)

# Se n√£o h√° mensagens ainda, solta a sauda√ß√£o + primeira pergunta
if not has_message_history:
    st.session_state.messages.append({"role": "assistant", "content": WELCOME_MSG})
    with st.chat_message("assistant"):
        st.markdown(WELCOME_MSG)
    perguntar_proximo_campo()

# Processa a mensagem do usu√°rio (se houver)
if user_message:
    # streamlit interpreta $ como LaTeX ‚Äî escapamos
    user_message = user_message.replace("$", r"\$")

    # Rate limit simples
    now = datetime.datetime.now()
    delta = now - st.session_state.prev_question_timestamp
    if delta < MIN_TIME_BETWEEN_REQUESTS:
        time.sleep(max(0.0, MIN_TIME_BETWEEN_REQUESTS.total_seconds() - delta.total_seconds()))
    st.session_state.prev_question_timestamp = datetime.datetime.now()

    # Exibe bubble do usu√°rio
    st.session_state.messages.append({"role": "user", "content": user_message})
    with st.chat_message("user"):
        st.text(user_message)

    # Se ainda estamos no funil de coleta, validar e avan√ßar
    if st.session_state.step < len(PERGUNTAS):
        chave = list(PERGUNTAS.keys())[st.session_state.step]

        # Valida√ß√£o
        if chave == "faixa_preco":  # campo livre sempre v√°lido
            valido = True
        else:
            validador = VALIDADORES.get(chave, lambda x: True)
            valido = bool(validador(user_message))

        if valido:
            st.session_state.lead[chave] = normalizar_campo(chave, user_message)

            st.session_state.step += 1

            # Feedback curto e segue pergunta
            with st.chat_message("assistant"):
                st.markdown(":white_check_mark: Entendi!")
            st.session_state.messages.append({"role": "assistant", "content": ":white_check_mark: Entendi!"})

            perguntar_proximo_campo()
        else:
            # Mensagem de erro ‚Äúamig√°vel‚Äù
            mensagens_erro = {
                "nome": "Por favor, informe **nome e sobrenome**.",
                "telefone": "Telefone deve ter **11 d√≠gitos** (DDD + n√∫mero), ex.: 11987654321.",
                "email": "Digite um **e-mail v√°lido**, ex.: nome@dominio.com.",
                "operacao": "Responda com **1** (Compra) ou **2** (Aluguel).",
                "tipo_imovel": "Escolha entre **casa**, **apartamento** ou **outro**.",
                "metragem": "Digite **apenas n√∫meros**, ex.: 80.",
                "quartos": "Digite **apenas n√∫meros**, ex.: 2.",
                "urgencia": "Responda **alta**, **m√©dia** ou **baixa**.",
            }
            erro = mensagens_erro.get(chave, "A resposta n√£o √© v√°lida. Tente novamente.")
            with st.chat_message("assistant"):
                st.markdown(f"‚ö†Ô∏è {erro}")
            st.session_state.messages.append({"role": "assistant", "content": f"‚ö†Ô∏è {erro}"})
            # Repergunta o mesmo campo
            with st.chat_message("assistant"):
                st.markdown(PERGUNTAS[chave])
            st.session_state.messages.append({"role": "assistant", "content": PERGUNTAS[chave]})

    else:
        # Ap√≥s finalizar o funil, trate mensagens como ‚Äúp√≥s-venda‚Äù (eco simples / FAQ placeholder)
        resposta = (
            "Obrigada! Se quiser, posso anotar mais prefer√™ncias (bairro, vagas, pet-friendly, "
            "condom√≠nio, lazer). Tamb√©m posso encaminhar seu contato para um corretor agora."
        )
        with st.chat_message("assistant"):
            st.markdown(resposta)
        st.session_state.messages.append({"role": "assistant", "content": resposta})

# Rodap√© pequeno (como no demo h√° links/avisos)
st.caption(f"üíº {COMPANY_NAME} ‚Ä¢ {COMPANY_BLURB} ‚Ä¢ üìÑ Leads em: `{LEADS_PATH}`")
